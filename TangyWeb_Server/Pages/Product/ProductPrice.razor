@page "/product/price/{id:int}"
@using Tangy_Business.Repository.IRepository;
@using Tangy_Models;

@inject IProductRepository _productRepository
@inject IProductPriceRepository _productPriceRepository
@attribute [Authorize]

<h3 class="card-title text-primary mb-3 ml-3">Product Price Management</h3>
@if (IsLoading)
{
    <div class="text-center">
        <img src="/images/loading.gif" />
    </div>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@Product.Name</h4>
                <span> Category: @Product.Category.Name </span> <br />
                Description: <span>@((MarkupString)Product.Description)</span>
            </div>
        </div>
        <div class="col-1">
            <img src="@Product.ImageUrl" class="w-100" />
        </div>
    </div>

    <button class="btn btn-primary" @onclick="AddProductPrice">Add Product Price</button>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Size</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var price in ProductPrices)
            {
                <tr>
                    <td>@price.Id</td>
                    <td>@price.Size</td>
                    <td>@price.Price.ToString("C2")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditProductPrice(price)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteProductPrice(price)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <EditForm Model="EditingPrice" OnValidSubmit="SaveProductPrice">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (IsEditing)
        {
            <div>
                <label>Size:</label>
                <InputSelect @bind-Value="EditingPrice.Size">
                    @foreach (var size in SizeList)
                    {
                        <option value="@size">@size</option>
                    }
                </InputSelect>
                <label>Price:</label>
                <InputNumber @bind-Value="EditingPrice.Price" />
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </div>
        }
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ProductDTO Product { get; set; } = new();
    private IEnumerable<ProductPriceDTO> ProductPrices { get; set; } = new List<ProductPriceDTO>();
    private bool IsLoading { get; set; } = true;
    private bool IsEditing { get; set; } = false;
    private ProductPriceDTO EditingPrice { get; set; } = new();

    IEnumerable<String> SizeList = new List<String>()
        {
            "Small", "Medium", "Large", "8oz", "16oz", "24oz"
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();

            Product = await _productRepository.Get(Id);
            ProductPrices = await _productPriceRepository.GetAll(Id);

            IsLoading = false;
            StateHasChanged();
        }
    }

    private void AddProductPrice()
    {
        EditingPrice = new ProductPriceDTO { ProductId = Id, Size = SizeList.First() };
        IsEditing = true;
    }

    private void EditProductPrice(ProductPriceDTO price)
    {
        EditingPrice = new ProductPriceDTO { Id = price.Id, ProductId = price.ProductId, Size = price.Size, Price = price.Price };
        IsEditing = true;
    }

    private async void SaveProductPrice()
    {
        if (string.IsNullOrEmpty(EditingPrice.Size))
        {
            // Display an error message or perform other error handling as needed
            Console.WriteLine("Size cannot be empty.");
            return;
        }

        if (EditingPrice.Id == 0)
        {
            await _productPriceRepository.Create(EditingPrice);
        }
        else
        {
            await _productPriceRepository.Update(EditingPrice);
        }

        ProductPrices = await _productPriceRepository.GetAll(Id);
        IsEditing = false;
        EditingPrice = new ProductPriceDTO();
    }

    private async void DeleteProductPrice(ProductPriceDTO price)
    {
        await _productPriceRepository.Delete(price.Id);
        ProductPrices = await _productPriceRepository.GetAll(Id);
    }

    private void CancelEdit()
    {
        IsEditing = false;
        EditingPrice = new ProductPriceDTO();
    }
}
