@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime


<_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click" IsParentComponentProcessing="IsLoading"></_DeleteConfirmation>


<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add new category</a>
    </div>
    <div class="col-12 mt-2">
        @if (Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var objCat in Categories)
                    {
                        <tr>
                            <td>
                                @objCat.Name
                            </td>
                            <td>
                                <NavLink href="@($"category/edit/{objCat.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                //loading gif
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>
            }
            else
            {
                //no records
                <p>No records found.</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    public bool IsLoading { get; set; } = true;
    private int DeleteCategoryId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadCategories);
    }

    private void LoadCategories()
    {
        Categories = _categoryRepository.GetAll();
        IsLoading = false;
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if(isConfirmed && DeleteCategoryId != 0)
        {
            //Delete
            _categoryRepository.Delete(DeleteCategoryId);
            LoadCategories();
            _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
